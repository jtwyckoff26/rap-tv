{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uPAkCA,IAyNeA,EAhPb,aCCkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a9d77f71.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\n//import { HashRouter, Route, Link } from \"react-router-dom\";\nimport { useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n//import Twitter from './components/Twitter';\n//import Youtube from './components/Youtube';\n//import Spotify from './components/Spotify';\n//import Instagram from './components/Instagram';\n//import Home from './components/Home';\n\n  function App() {\n        return (\n            // <HashRouter basename=\"/\">\n            //     <div>\n            //         <Route exact path=\"/\" render={props => <Home {...props} />} /> \n            //         <Route exact path=\"/twitter\" render={props => <Twitter {...props} />} />\n            //         <Route exact path=\"/youtube\" render={props => <Youtube {...props} />} />\n            //         <Route exact path=\"/spotify\" render={props => <Spotify {...props} />} />\n            //         <Route exact path=\"/instagram\" render={props => <Instagram {...props} />} />\n            //     </div>\n            // </HashRouter>\n\n            <Router basename=\"/\">\n                <Route exact path=\"/\" render={props => <Home {...props} />} /> \n                <Route exact path=\"/youtube\" render={props => <Youtube {...props} />} />\n                <Route exact path=\"/twitter\" render={props => <Twitter {...props} />} />\n                <Route exact path=\"/instagram\" render={props => <Instagram {...props} />} />\n                <Route exact path=\"/spotify\" render={props => <Spotify {...props} />} />\n            </Router>\n        );\n}\n\n\nconst Home = () => {\n  return (\n      <div>\n          <ul>\n            <li><Link to=\"/\">Home</Link></li>\n            <li><Link to=\"/twitter\">Twitter</Link></li>\n            <li><Link to=\"/youtube\">Youtube</Link></li>\n            <li><Link to=\"/spotify\">Spotify</Link></li>\n            <li><Link to=\"/instagram\">Instagram</Link></li>\n          </ul>\n      </div>\n  );\n};\n\n\nconst Instagram = () => {\n  const call_instagram = () => {\n      //console.log('Getting sub status');\n        let myParam;\n        let baseString;\n        let searchString;\n        searchString = window.location.search;\n        const urlParams = new URLSearchParams(window.location.search);\n        console.log(\"urlParams: \", window.location.search)\n        console.log(\"urlParams.get('video'): \", urlParams.get('video'));\n        if (searchString.includes('video')) {\n            myParam = urlParams.get('video');\n            baseString = \"www.youtube.com/watch?v=\";\n        }\n        else {\n            myParam = \"\";\n            baseString = \"www.youtube.com/channel/UC-pariAxZlINnspVJEAy2Zw\";\n        }\n\n        var desktopFallback = `https://${baseString}${myParam}`,\n        mobileFallback = `https://${baseString}${myParam}`,\n        app = `vnd.youtube://${baseString}${myParam}`;\n\n        if( /Android|iPhone|iPad|iPod/i.test(navigator.userAgent) ) {\n            window.location = app;\n            window.setTimeout(function() {\n                window.location = mobileFallback;\n            }, 25);\n        } else {\n            window.location = desktopFallback;\n        }\n\n        function killPopup() {\n            window.removeEventListener('pagehide', killPopup);\n        }\n\n        window.addEventListener('pagehide', killPopup);\n  };\n\n  useEffect(() => {\n       //console.log('Use effect');\n      call_instagram();\n  });\n\n    return (\n        <div>\n        </div>\n    );\n};\n\nconst Spotify = () => {\n  const call_spotify = () => {\n      //console.log('Getting sub status');\n        let myParam;\n        let baseString;\n        let searchString;\n        searchString = window.location.search;\n        const urlParams = new URLSearchParams(window.location.search);\n        console.log(\"urlParams: \", window.location.search)\n        console.log(\"urlParams.get('video'): \", urlParams.get('video'));\n        if (searchString.includes('video')) {\n            myParam = urlParams.get('video');\n            baseString = \"www.youtube.com/watch?v=\";\n        }\n        else {\n            myParam = \"\";\n            baseString = \"www.youtube.com/channel/UC-pariAxZlINnspVJEAy2Zw\";\n        }\n\n        var desktopFallback = `https://${baseString}${myParam}`,\n        mobileFallback = `https://${baseString}${myParam}`,\n        app = `vnd.youtube://${baseString}${myParam}`;\n\n        if( /Android|iPhone|iPad|iPod/i.test(navigator.userAgent) ) {\n            window.location = app;\n            window.setTimeout(function() {\n                window.location = mobileFallback;\n            }, 25);\n        } else {\n            window.location = desktopFallback;\n        }\n\n        function killPopup() {\n            window.removeEventListener('pagehide', killPopup);\n        }\n\n        window.addEventListener('pagehide', killPopup);\n  };\n\n  useEffect(() => {\n       //console.log('Use effect');\n      call_spotify();\n  });\n\n  return (\n    <div>\n    </div>\n  );\n};\n\nconst Twitter = () => {\n  const call_twitter = () => {\n      //console.log('Getting sub status');\n        let myParam;\n        let baseString;\n        let searchString;\n        searchString = window.location.search;\n        const urlParams = new URLSearchParams(window.location.search);\n        console.log(\"urlParams: \", window.location.search)\n        console.log(\"urlParams.get('video'): \", urlParams.get('video'));\n        if (searchString.includes('video')) {\n            myParam = urlParams.get('video');\n            baseString = \"www.youtube.com/watch?v=\";\n        }\n        else {\n            myParam = \"\";\n            baseString = \"www.youtube.com/channel/UC-pariAxZlINnspVJEAy2Zw\";\n        }\n\n        var desktopFallback = `https://${baseString}${myParam}`,\n        mobileFallback = `https://${baseString}${myParam}`,\n        app = `vnd.youtube://${baseString}${myParam}`;\n\n        if( /Android|iPhone|iPad|iPod/i.test(navigator.userAgent) ) {\n            window.location = app;\n            window.setTimeout(function() {\n                window.location = mobileFallback;\n            }, 25);\n        } else {\n            window.location = desktopFallback;\n        }\n\n        function killPopup() {\n            window.removeEventListener('pagehide', killPopup);\n        }\n\n        window.addEventListener('pagehide', killPopup);\n  };\n\n  useEffect(() => {\n       //console.log('Use effect');\n      call_twitter();\n  });\n\n  return (\n      <div>\n          \n      </div>\n  );\n};\n\nconst Youtube = () => {\n  const call_youtube = () => {\n      //console.log('Getting sub status');\n        let myParam;\n        let baseString;\n        let searchString;\n        searchString = window.location.search;\n        const urlParams = new URLSearchParams(window.location.search);\n        console.log(\"urlParams: \", window.location.search)\n        console.log(\"urlParams.get('video'): \", urlParams.get('video'));\n        if (searchString.includes('video')) {\n            myParam = urlParams.get('video');\n            baseString = \"www.youtube.com/watch?v=\";\n        }\n        else {\n            myParam = \"\";\n            baseString = \"www.youtube.com/channel/UC-pariAxZlINnspVJEAy2Zw\";\n        }\n\n        var desktopFallback = `https://${baseString}${myParam}`,\n        mobileFallback = `https://${baseString}${myParam}`,\n        app = `vnd.youtube://${baseString}${myParam}`;\n\n        if( /Android|iPhone|iPad|iPod/i.test(navigator.userAgent) ) {\n            window.location = app;\n            window.setTimeout(function() {\n                window.location = mobileFallback;\n            }, 25);\n        } else {\n            window.location = desktopFallback;\n        }\n\n        function killPopup() {\n            window.removeEventListener('pagehide', killPopup);\n        }\n\n        window.addEventListener('pagehide', killPopup);\n  };\n\n  useEffect(() => {\n       //console.log('Use effect');\n      call_youtube();\n  });\n\n  return (\n      <div>\n          \n      </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}